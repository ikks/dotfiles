# This configuration works with two patches to ease navigation code:
# Context like breadcrumbs on demand
#
# [remote "breadcrumb"]
#       url = https://github.com/FulecoRafa/helix.git
#       fetch = +refs/heads/*:refs/remotes/breadcrumb/*
#
# Sticky context
#
# [remote "stickycontext"]
#       url = https://github.com/SoraTenshi/helix.git
#       fetch = +refs/heads/*:refs/remotes/stickycontext/*
#
# Also has support for rainbow

[editor]
# Show currently open buffers, only when more than one exists.
bufferline = "multiple"

# Show diagnostics inline
end-of-line-diagnostics = "hint"

# Highlight all lines with a cursor
cursorline = true
cursorcolumn = true

rulers = [72, 90, 140]

# Easier movement
line-number = "relative"

# Rainbow brackets
rainbow-brackets = true

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "underline"

[editor.indent-guides]
character = "╎"
render = true

[editor.statusline]
left = ["mode", "spinner", "version-control", "file-name"]
right = ["diagnostics", "selections", "register", "position", "position-percentage", "file-encoding"]

[editor.soft-wrap]
enable = true

[editor.inline-diagnostics]
# Minimum severity to show a diagnostic on the primary cursor's line.
# Note that `cursor-line` diagnostics are hidden in insert mode.
cursor-line = "error"
# Minimum severity to show a diagnostic on other lines:
# other-lines = "error"

[keys.select."+"]
# Eliminar los caracteres al final
r = ":pipe sed 's/[ \t]*$//'"
# Wraplines at 72
w = ":pipe fmt -72"
# Translate from English to Spanish locally
e = ":pipe /home/igor/bin/translatewithkotki"
# Translate from Spanish to English locally
i = ":pipe /home/igor/bin/tran"
# Switch infinitive to third person
v = ":pipe /home/igor/bin/conjugatercera"
# Show Synonims in spanish, requires Internet
s = ":pipe espasacalvesynonims.sh"
# Leer algo en español
d = ":pipe /home/igor/bin/leeme"

[keys.normal."-"]
e = ":pipe /home/igor/bin/translatewithkotki"
# run tests on current buffer with pytest
t = [":write", ":! pytest %{buffer_name}"]
# run the current python buffer
p = [":write", ":! python %{buffer_name}"]
# make
m = ":! make"
# make install
i = ":! make install"
# make run
r = ":! make run"
# make clean
c = ":! make clean"
# Build with uv
b = ":! uv build"
# uv run
v = [":write",":! uv run %{buffer_name}"]
# Reset diff change
u = ":reset-diff-change"
# Debian wml compile and show in browser
w = [":run-shell-command make && xdg-open `pwd`/$(echo %{buffer_name} | sed 's/wml/es.html/g')"]

[keys.normal."+"]
# Translate from English to Spanish with Internet
E = ":pipe trans -b en:es"
# Traducir de español a inglés con Internet
I = ":pipe trans -b es:en"
# Translate from English to Spanish locally
e = ":pipe /home/igor/bin/translatewithkotki"
# Traducir de español a inglés localmente
i = ":pipe /home/igor/bin/tran"
# Switch infinitive to third person
v = ":pipe /home/igor/bin/conjugatercera"
# Show Synonims in spanish, requires Internet
s = ":pipe espasacalvesynonims.sh"
# Eliminar los caracteres al final
r = ":pipe sed 's/[ \t]*$//'"
# Wraplines a 72
w = ":pipe fmt -72"
# Insert from the clipboard
"+" = ":insert-output cliphist list | wofi --dmenu | cliphist decode"
# Build zig
z = ":run-shell-command zigbuilder"
# Build test
t = ":run-shell-command zigbuildertest"
# clear screens
c = ":run-shell-command clearothers"
# compile the po buffer
m = ":run-shell-command msgfmt -v -c %{buffer_name}"
# edit emoji file
u = ":open /home/igor/.local/share/local/utf-chars.csv"

# latam keyboard, less shifting
[keys.normal."{"]
d = "goto_prev_diag"
D = "goto_first_diag"
g = "goto_prev_change"
G = "goto_first_change"
f = "goto_prev_function"
t = "goto_prev_class"
a = "goto_prev_parameter"
c = "goto_prev_comment"
e = "goto_prev_entry"
T = "goto_prev_test"
p = "goto_prev_paragraph"
"space" = "add_newline_above"
# Next untranslated string
u = "@?\"\"\\n\\n<ret>"
# Next fuzzy string
z = "@?#, fuzzy<ret>"

[keys.normal."}"]
d = "goto_next_diag"
D = "goto_last_diag"
g = "goto_next_change"
G = "goto_last_change"
f = "goto_next_function"
t = "goto_next_class"
a = "goto_next_parameter"
c = "goto_next_comment"
e = "goto_next_entry"
T = "goto_next_test"
p = "goto_next_paragraph"
"space" = "add_newline_below"
# Previous untranslated string
u = "@/\"\"\\n\\n<ret>"
# Previous fuzzy string
z = "@/#, fuzzy<ret>"


[keys.normal.space]

x = ":toggle whitespace.render all none"
t = ":tree-sitter-breadcrumbs"

# VCS operations
[keys.normal.space."v"]
# Blame the current line
b = ":! git blame --date=relative -L %{cursor_line},%{cursor_line} %{buffer_name}"
# Blame the current_buffer
B = [':! %sh{git blame --date=relative "%{buffer_name}" > /tmp/hx.blame}', ":rla", ":o /tmp/hx.blame"]
h = ":! git log %{buffer_name}"
v = ":! git status"

[keys.normal]
A-x = "extend_to_line_bounds"
X = ["extend_line_up", "extend_to_line_bounds"]


# Lazygit
C-g = [
    ":write-all",
    ":new",
    ":insert-output lazygit",
    ":buffer-close!",
    ":redraw",
    ":reload-all"
]


# Better to have a second terminal and move to it with Cmd-l...
# Aspell current file
# C-a = [
#     ":write-all",
#     ":run-shell-command aspell -c %{buffer_name}",
#     ":redraw",
#     ":reload-all"
# ]


# Yazi to find and open files
# See https://github.com/helix-editor/helix/discussions/12934
C-y = [
  ':sh rm -f /tmp/unique-file',
  ':insert-output yazi %{buffer_name} --chooser-file=/tmp/unique-file',
  ':insert-output echo "\x1b[?1049h\x1b[?2004h" > /dev/tty',
  ':open %sh{cat /tmp/unique-file}',
  ':redraw',
]


[keys.select]
A-x = "extend_to_line_bounds"
X = ["extend_line_up", "extend_to_line_bounds"]


[editor.auto-pairs]
  '(' = ')'
  '{' = '}'
  '[' = ']'
  '"' = '"'
  '`' = '`'
  '<' = '>'
  '«' = '»'


[editor.sticky-context]
enable = false
indicator = true
max-lines = 10
